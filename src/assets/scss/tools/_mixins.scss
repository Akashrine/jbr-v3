/*==============================
=            Mixins            =
==============================*/

/**
*
* Mixin for breakpoints
*
**/
/**
 * Mixin handling breakpoints for media queries / Mobile First
 */
@mixin breakpoint($point) {
    @if $point == large {
        @media (min-width: 48em) {
            @content;
        }
        //960px
    }
    @if $point == medium {
        @media (min-width: 38em) {
            @content;
        }
        //760px
    }
    @if $point == small {
        @media (min-width: 28em){
            @content;
        }
    }
}

/**
*
* Clearfix
*
**/
@mixin clearfix {
    *zoom: 1;
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin aligner{
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin contentAlign() {
    display: flex;
    justify-content: center;
}

// PX to REM - Usage: font-size: rem(37px);
@function rem($px, $base: $base-font-size) {
    @return ($px / $base) * 1rem;
}

// Transitions - Usage: @include transition(all .2s ease);
@mixin transition($args...) {
    -webkit-transition: $args;
       -moz-transition: $args;
        -ms-transition: $args;
         -o-transition: $args;
            transition: $args;
}


/*  Vendor Prefixing
/*  @include vendor(background-size, cover);
/*==================================================*/

@mixin vendor($property, $value...){
    -webkit-#{$property}: $value;
       -moz-#{$property}: $value;
        -ms-#{$property}: $value;
         -o-#{$property}: $value;
            #{$property}: $value;
}

/*  Animation
/*  @include animation(fadeInUp, 500ms, 200ms, ease, forward);
/*==================================================*/

@mixin animation($name, $duration, $delay, $timing, $direction){
    @include vendor(animation-name, $name);
    @include vendor(animation-duration, $duration);
    @include vendor(animation-delay, $delay);
    @include vendor(animation-iteration-count, $timing);
    @include vendor(animation-fill-mode, $direction);
}

/*  Opacity
/*  @include opacity(100);
/*==================================================*/

@mixin opacity($property){
    zoom: 1;
    filter: alpha(opacity=$property);
    opacity: $property / 100;
}

@mixin gradient(){
        width: 100%;
        height: 0.2rem;
        background-image: -moz-linear-gradient(left, color(brand) 0%, color(brand-annex) 100%);
        background-image: -webkit-linear-gradient(left, color(brand) 0%, color(brand-annex) 100%);
        background-image: linear-gradient(to right, color(brand) 0%, color(brand-annex) 100%);
        margin: 0;
        padding: 0;
}
/*=========================================================================
=            // Semantic.gs //             =
=========================================================================*/



@function gridsystem-width($columns: $columns) {
    @return $column-width * $columns + $gutter-width * $columns;
}



/*==========  Grid part  ==========*/


@mixin row($columns: $columns) {
    display: block;
    width: $total-width * ($gutter-width + gridsystem-width($columns)) / gridsystem-width($columns);
    max-width: $content-width;
    margin: 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns) * -1;
    @include clearfix;
}

@mixin column($x, $columns: $columns) {
    display: inline;
    float: left;
    width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width) / gridsystem-width($columns);
    margin: 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
}

@mixin push($offset: 1) {
    margin-left: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
}

@mixin pull($offset: 1) {
    margin-right: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
}


/*=====  End of Layout and Grid (kind of)  ======*/
// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff ttf svg) {
    $src: null;

    $extmods: (
        eot: "?",
        svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
        otf: "opentype",
        ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}
/* --------------------------------------------------------
    fadeindown
-------------------------------------------------------- */

@-webkit-keyframes fadeInDown {
    from {
        @include opacity(0);
    }
    to {
        @include opacity(100);
    }
}

@-moz-keyframes fadeInDown {
    from {
        @include opacity(0);
    }
    to {
        @include opacity(100);
    }
}

@keyframes fadeInDown {
    from {
        @include opacity(0);
    }
    to {
        @include opacity(100);
    }
}